'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPropsAssignment = exports.isHandledAssignment = undefined;

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var isHandledAssignment = exports.isHandledAssignment = function isHandledAssignment(path, _ref) {
  var left = _ref.left,
      right = _ref.right,
      property = _ref.property;

  if (!t.isMemberExpression(left) || !t.isIdentifier(property, { name: 'handledProps' })) return false;
  if (!t.isArrayExpression(right)) throw path.buildCodeFrameError('`handledProps` must be an array');

  return true;
};

var isPropsAssignment = exports.isPropsAssignment = function isPropsAssignment(path, _ref2) {
  var left = _ref2.left,
      right = _ref2.right,
      property = _ref2.property;

  if (!t.isMemberExpression(left)) return false;
  if (!t.isIdentifier(property, { name: 'defaultProps' }) && !t.isIdentifier(property, { name: 'propTypes' })) {
    return false;
  }
  if (!t.isObjectExpression(right)) throw path.buildCodeFrameError('`defaultProps` and `propTypes` must be an object');

  return true;
};