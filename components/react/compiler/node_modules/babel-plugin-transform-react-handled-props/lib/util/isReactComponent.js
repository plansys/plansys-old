'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isClass = undefined;

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var containsJSX = function containsJSX(path) {
  if (t.isJSXElement(path)) return true;
  var containJSX = void 0;

  path.traverse({
    JSXElement: function JSXElement(jsxPath) {
      containJSX = true;
      jsxPath.stop();
    }
  });

  return containJSX;
};

var hasRenderMethod = function hasRenderMethod(_ref) {
  var body = _ref.node.body.body;
  return body.some(function (member) {
    return t.isClassMethod(member) && t.isIdentifier(member.key, { name: 'render' });
  });
};

var hasSuperClass = function hasSuperClass(_ref2) {
  var superClass = _ref2.node.superClass;
  return !!superClass;
};

var isClass = exports.isClass = function isClass(path) {
  return t.isClassDeclaration(path) || t.isClassExpression(path);
};

var isFunction = function isFunction(path) {
  if (t.isFunctionDeclaration(path)) return true;
  if (!t.isArrowFunctionExpression(path) && !t.isFunctionExpression(path)) return false;

  return t.isVariableDeclarator(path.parent);
};

var isReactClass = function isReactClass(path) {
  return isClass(path) && hasSuperClass(path) && hasRenderMethod(path);
};

var isReactFunction = function isReactFunction(path) {
  return isFunction(path) && containsJSX(path.get('body'));
};

var isReactComponent = function isReactComponent(path) {
  return isReactClass(path) || isReactFunction(path);
};

exports.default = isReactComponent;