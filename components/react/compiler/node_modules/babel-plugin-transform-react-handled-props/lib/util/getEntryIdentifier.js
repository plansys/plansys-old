'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var findVariableDeclarator = function findVariableDeclarator(path) {
  return path.findParent(function (parentPath) {
    return t.isVariableDeclarator(parentPath);
  });
};

var getName = function getName(_ref) {
  var name = _ref.node.id.name;
  return name;
};

var getFunctionIdentifier = function getFunctionIdentifier(path) {
  if (t.isFunctionDeclaration(path)) return getName(path);
  if (t.isArrowFunctionExpression(path) || t.isFunctionExpression(path)) return getName(findVariableDeclarator(path));

  throw path.buildCodeFrameError('`path` is unsupported Function definition');
};

var getEntryIdentifier = function getEntryIdentifier(path) {
  if (t.isClass(path)) return getName(path);
  if (t.isFunction(path)) return getFunctionIdentifier(path);

  throw path.buildCodeFrameError('`path` must be Class or Function definition');
};

exports.default = getEntryIdentifier;