// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package state

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Tid
//  - Uid
//  - Sid
//  - Cid
//  - Tag
type Client struct {
  Tid *string `thrift:"tid,1" db:"tid" json:"tid,omitempty"`
  Uid *string `thrift:"uid,2" db:"uid" json:"uid,omitempty"`
  Sid *string `thrift:"sid,3" db:"sid" json:"sid,omitempty"`
  Cid *string `thrift:"cid,4" db:"cid" json:"cid,omitempty"`
  Tag *string `thrift:"tag,5" db:"tag" json:"tag,omitempty"`
}

func NewClient() *Client {
  return &Client{}
}

var Client_Tid_DEFAULT string
func (p *Client) GetTid() string {
  if !p.IsSetTid() {
    return Client_Tid_DEFAULT
  }
return *p.Tid
}
var Client_Uid_DEFAULT string
func (p *Client) GetUid() string {
  if !p.IsSetUid() {
    return Client_Uid_DEFAULT
  }
return *p.Uid
}
var Client_Sid_DEFAULT string
func (p *Client) GetSid() string {
  if !p.IsSetSid() {
    return Client_Sid_DEFAULT
  }
return *p.Sid
}
var Client_Cid_DEFAULT string
func (p *Client) GetCid() string {
  if !p.IsSetCid() {
    return Client_Cid_DEFAULT
  }
return *p.Cid
}
var Client_Tag_DEFAULT string
func (p *Client) GetTag() string {
  if !p.IsSetTag() {
    return Client_Tag_DEFAULT
  }
return *p.Tag
}
func (p *Client) IsSetTid() bool {
  return p.Tid != nil
}

func (p *Client) IsSetUid() bool {
  return p.Uid != nil
}

func (p *Client) IsSetSid() bool {
  return p.Sid != nil
}

func (p *Client) IsSetCid() bool {
  return p.Cid != nil
}

func (p *Client) IsSetTag() bool {
  return p.Tag != nil
}

func (p *Client) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Client)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Tid = &v
}
  return nil
}

func (p *Client)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Uid = &v
}
  return nil
}

func (p *Client)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sid = &v
}
  return nil
}

func (p *Client)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Cid = &v
}
  return nil
}

func (p *Client)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Tag = &v
}
  return nil
}

func (p *Client) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Client"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Client) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTid() {
    if err := oprot.WriteFieldBegin("tid", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err) }
    if err := oprot.WriteString(string(*p.Tid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err) }
  }
  return err
}

func (p *Client) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUid() {
    if err := oprot.WriteFieldBegin("uid", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
    if err := oprot.WriteString(string(*p.Uid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  }
  return err
}

func (p *Client) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSid() {
    if err := oprot.WriteFieldBegin("sid", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sid: ", p), err) }
    if err := oprot.WriteString(string(*p.Sid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sid (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sid: ", p), err) }
  }
  return err
}

func (p *Client) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetCid() {
    if err := oprot.WriteFieldBegin("cid", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cid: ", p), err) }
    if err := oprot.WriteString(string(*p.Cid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cid (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cid: ", p), err) }
  }
  return err
}

func (p *Client) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTag() {
    if err := oprot.WriteFieldBegin("tag", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tag: ", p), err) }
    if err := oprot.WriteString(string(*p.Tag)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tag: ", p), err) }
  }
  return err
}

func (p *Client) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Client(%+v)", *p)
}

type StateManager interface {
  // Parameters:
  //  - Client
  //  - Reason
  Disconnect(client *Client, reason string) (err error)
  // Parameters:
  //  - Client
  //  - Message
  Send(client *Client, message string) (err error)
  // Parameters:
  //  - Client
  GetClients(client *Client) (r []*Client, err error)
  // Parameters:
  //  - Client
  //  - Tag
  SetTag(client *Client, tag string) (err error)
  // Parameters:
  //  - Key
  //  - Val
  SetState(key string, val string) (err error)
  // Parameters:
  //  - Key
  GetState(key string) (r string, err error)
}

type StateManagerClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewStateManagerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StateManagerClient {
  return &StateManagerClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewStateManagerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StateManagerClient {
  return &StateManagerClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Client
//  - Reason
func (p *StateManagerClient) Disconnect(client *Client, reason string) (err error) {
  if err = p.sendDisconnect(client, reason); err != nil { return }
  return p.recvDisconnect()
}

func (p *StateManagerClient) sendDisconnect(client *Client, reason string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("disconnect", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := StateManagerDisconnectArgs{
  Client : client,
  Reason : reason,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *StateManagerClient) recvDisconnect() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "disconnect" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "disconnect failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "disconnect failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "disconnect failed: invalid message type")
    return
  }
  result := StateManagerDisconnectResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - Client
//  - Message
func (p *StateManagerClient) Send(client *Client, message string) (err error) {
  if err = p.sendSend(client, message); err != nil { return }
  return p.recvSend()
}

func (p *StateManagerClient) sendSend(client *Client, message string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("send", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := StateManagerSendArgs{
  Client : client,
  Message : message,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *StateManagerClient) recvSend() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "send" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "send failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "send failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "send failed: invalid message type")
    return
  }
  result := StateManagerSendResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - Client
func (p *StateManagerClient) GetClients(client *Client) (r []*Client, err error) {
  if err = p.sendGetClients(client); err != nil { return }
  return p.recvGetClients()
}

func (p *StateManagerClient) sendGetClients(client *Client)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getClients", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := StateManagerGetClientsArgs{
  Client : client,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *StateManagerClient) recvGetClients() (value []*Client, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getClients" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getClients failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getClients failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getClients failed: invalid message type")
    return
  }
  result := StateManagerGetClientsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Client
//  - Tag
func (p *StateManagerClient) SetTag(client *Client, tag string) (err error) {
  if err = p.sendSetTag(client, tag); err != nil { return }
  return p.recvSetTag()
}

func (p *StateManagerClient) sendSetTag(client *Client, tag string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := StateManagerSetTagArgs{
  Client : client,
  Tag : tag,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *StateManagerClient) recvSetTag() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setTag" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setTag failed: invalid message type")
    return
  }
  result := StateManagerSetTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - Key
//  - Val
func (p *StateManagerClient) SetState(key string, val string) (err error) {
  if err = p.sendSetState(key, val); err != nil { return }
  return p.recvSetState()
}

func (p *StateManagerClient) sendSetState(key string, val string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setState", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := StateManagerSetStateArgs{
  Key : key,
  Val : val,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *StateManagerClient) recvSetState() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setState" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setState failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setState failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setState failed: invalid message type")
    return
  }
  result := StateManagerSetStateResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - Key
func (p *StateManagerClient) GetState(key string) (r string, err error) {
  if err = p.sendGetState(key); err != nil { return }
  return p.recvGetState()
}

func (p *StateManagerClient) sendGetState(key string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getState", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := StateManagerGetStateArgs{
  Key : key,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *StateManagerClient) recvGetState() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getState" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getState failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getState failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getState failed: invalid message type")
    return
  }
  result := StateManagerGetStateResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type StateManagerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler StateManager
}

func (p *StateManagerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *StateManagerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *StateManagerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewStateManagerProcessor(handler StateManager) *StateManagerProcessor {

  self12 := &StateManagerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["disconnect"] = &stateManagerProcessorDisconnect{handler:handler}
  self12.processorMap["send"] = &stateManagerProcessorSend{handler:handler}
  self12.processorMap["getClients"] = &stateManagerProcessorGetClients{handler:handler}
  self12.processorMap["setTag"] = &stateManagerProcessorSetTag{handler:handler}
  self12.processorMap["setState"] = &stateManagerProcessorSetState{handler:handler}
  self12.processorMap["getState"] = &stateManagerProcessorGetState{handler:handler}
return self12
}

func (p *StateManagerProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x13

}

type stateManagerProcessorDisconnect struct {
  handler StateManager
}

func (p *stateManagerProcessorDisconnect) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerDisconnectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerDisconnectResult{}
  var err2 error
  if err2 = p.handler.Disconnect(args.Client, args.Reason); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disconnect: " + err2.Error())
    oprot.WriteMessageBegin("disconnect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("disconnect", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorSend struct {
  handler StateManager
}

func (p *stateManagerProcessorSend) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerSendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("send", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerSendResult{}
  var err2 error
  if err2 = p.handler.Send(args.Client, args.Message); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing send: " + err2.Error())
    oprot.WriteMessageBegin("send", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("send", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorGetClients struct {
  handler StateManager
}

func (p *stateManagerProcessorGetClients) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerGetClientsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getClients", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerGetClientsResult{}
var retval []*Client
  var err2 error
  if retval, err2 = p.handler.GetClients(args.Client); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClients: " + err2.Error())
    oprot.WriteMessageBegin("getClients", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getClients", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorSetTag struct {
  handler StateManager
}

func (p *stateManagerProcessorSetTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerSetTagArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setTag", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerSetTagResult{}
  var err2 error
  if err2 = p.handler.SetTag(args.Client, args.Tag); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setTag: " + err2.Error())
    oprot.WriteMessageBegin("setTag", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("setTag", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorSetState struct {
  handler StateManager
}

func (p *stateManagerProcessorSetState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerSetStateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerSetStateResult{}
  var err2 error
  if err2 = p.handler.SetState(args.Key, args.Val); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setState: " + err2.Error())
    oprot.WriteMessageBegin("setState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("setState", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stateManagerProcessorGetState struct {
  handler StateManager
}

func (p *stateManagerProcessorGetState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StateManagerGetStateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StateManagerGetStateResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetState(args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getState: " + err2.Error())
    oprot.WriteMessageBegin("getState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getState", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Client
//  - Reason
type StateManagerDisconnectArgs struct {
  Client *Client `thrift:"client,1" db:"client" json:"client"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
}

func NewStateManagerDisconnectArgs() *StateManagerDisconnectArgs {
  return &StateManagerDisconnectArgs{}
}

var StateManagerDisconnectArgs_Client_DEFAULT *Client
func (p *StateManagerDisconnectArgs) GetClient() *Client {
  if !p.IsSetClient() {
    return StateManagerDisconnectArgs_Client_DEFAULT
  }
return p.Client
}

func (p *StateManagerDisconnectArgs) GetReason() string {
  return p.Reason
}
func (p *StateManagerDisconnectArgs) IsSetClient() bool {
  return p.Client != nil
}

func (p *StateManagerDisconnectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerDisconnectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Client = &Client{}
  if err := p.Client.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Client), err)
  }
  return nil
}

func (p *StateManagerDisconnectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *StateManagerDisconnectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerDisconnectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("client", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client: ", p), err) }
  if err := p.Client.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Client), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client: ", p), err) }
  return err
}

func (p *StateManagerDisconnectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *StateManagerDisconnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerDisconnectArgs(%+v)", *p)
}

type StateManagerDisconnectResult struct {
}

func NewStateManagerDisconnectResult() *StateManagerDisconnectResult {
  return &StateManagerDisconnectResult{}
}

func (p *StateManagerDisconnectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerDisconnectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("disconnect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerDisconnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerDisconnectResult(%+v)", *p)
}

// Attributes:
//  - Client
//  - Message
type StateManagerSendArgs struct {
  Client *Client `thrift:"client,1" db:"client" json:"client"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewStateManagerSendArgs() *StateManagerSendArgs {
  return &StateManagerSendArgs{}
}

var StateManagerSendArgs_Client_DEFAULT *Client
func (p *StateManagerSendArgs) GetClient() *Client {
  if !p.IsSetClient() {
    return StateManagerSendArgs_Client_DEFAULT
  }
return p.Client
}

func (p *StateManagerSendArgs) GetMessage() string {
  return p.Message
}
func (p *StateManagerSendArgs) IsSetClient() bool {
  return p.Client != nil
}

func (p *StateManagerSendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerSendArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Client = &Client{}
  if err := p.Client.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Client), err)
  }
  return nil
}

func (p *StateManagerSendArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *StateManagerSendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("send_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerSendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("client", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client: ", p), err) }
  if err := p.Client.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Client), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client: ", p), err) }
  return err
}

func (p *StateManagerSendArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *StateManagerSendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerSendArgs(%+v)", *p)
}

type StateManagerSendResult struct {
}

func NewStateManagerSendResult() *StateManagerSendResult {
  return &StateManagerSendResult{}
}

func (p *StateManagerSendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerSendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("send_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerSendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerSendResult(%+v)", *p)
}

// Attributes:
//  - Client
type StateManagerGetClientsArgs struct {
  Client *Client `thrift:"client,1" db:"client" json:"client"`
}

func NewStateManagerGetClientsArgs() *StateManagerGetClientsArgs {
  return &StateManagerGetClientsArgs{}
}

var StateManagerGetClientsArgs_Client_DEFAULT *Client
func (p *StateManagerGetClientsArgs) GetClient() *Client {
  if !p.IsSetClient() {
    return StateManagerGetClientsArgs_Client_DEFAULT
  }
return p.Client
}
func (p *StateManagerGetClientsArgs) IsSetClient() bool {
  return p.Client != nil
}

func (p *StateManagerGetClientsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerGetClientsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Client = &Client{}
  if err := p.Client.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Client), err)
  }
  return nil
}

func (p *StateManagerGetClientsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClients_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerGetClientsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("client", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client: ", p), err) }
  if err := p.Client.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Client), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client: ", p), err) }
  return err
}

func (p *StateManagerGetClientsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerGetClientsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StateManagerGetClientsResult struct {
  Success []*Client `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStateManagerGetClientsResult() *StateManagerGetClientsResult {
  return &StateManagerGetClientsResult{}
}

var StateManagerGetClientsResult_Success_DEFAULT []*Client

func (p *StateManagerGetClientsResult) GetSuccess() []*Client {
  return p.Success
}
func (p *StateManagerGetClientsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StateManagerGetClientsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerGetClientsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Client, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &Client{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Success = append(p.Success, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StateManagerGetClientsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClients_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerGetClientsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StateManagerGetClientsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerGetClientsResult(%+v)", *p)
}

// Attributes:
//  - Client
//  - Tag
type StateManagerSetTagArgs struct {
  Client *Client `thrift:"client,1" db:"client" json:"client"`
  Tag string `thrift:"tag,2" db:"tag" json:"tag"`
}

func NewStateManagerSetTagArgs() *StateManagerSetTagArgs {
  return &StateManagerSetTagArgs{}
}

var StateManagerSetTagArgs_Client_DEFAULT *Client
func (p *StateManagerSetTagArgs) GetClient() *Client {
  if !p.IsSetClient() {
    return StateManagerSetTagArgs_Client_DEFAULT
  }
return p.Client
}

func (p *StateManagerSetTagArgs) GetTag() string {
  return p.Tag
}
func (p *StateManagerSetTagArgs) IsSetClient() bool {
  return p.Client != nil
}

func (p *StateManagerSetTagArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerSetTagArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Client = &Client{}
  if err := p.Client.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Client), err)
  }
  return nil
}

func (p *StateManagerSetTagArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *StateManagerSetTagArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerSetTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("client", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client: ", p), err) }
  if err := p.Client.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Client), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client: ", p), err) }
  return err
}

func (p *StateManagerSetTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag: ", p), err) }
  return err
}

func (p *StateManagerSetTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerSetTagArgs(%+v)", *p)
}

type StateManagerSetTagResult struct {
}

func NewStateManagerSetTagResult() *StateManagerSetTagResult {
  return &StateManagerSetTagResult{}
}

func (p *StateManagerSetTagResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerSetTagResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerSetTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerSetTagResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Val
type StateManagerSetStateArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Val string `thrift:"val,2" db:"val" json:"val"`
}

func NewStateManagerSetStateArgs() *StateManagerSetStateArgs {
  return &StateManagerSetStateArgs{}
}


func (p *StateManagerSetStateArgs) GetKey() string {
  return p.Key
}

func (p *StateManagerSetStateArgs) GetVal() string {
  return p.Val
}
func (p *StateManagerSetStateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerSetStateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *StateManagerSetStateArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Val = v
}
  return nil
}

func (p *StateManagerSetStateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setState_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerSetStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *StateManagerSetStateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("val", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:val: ", p), err) }
  if err := oprot.WriteString(string(p.Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.val (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:val: ", p), err) }
  return err
}

func (p *StateManagerSetStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerSetStateArgs(%+v)", *p)
}

type StateManagerSetStateResult struct {
}

func NewStateManagerSetStateResult() *StateManagerSetStateResult {
  return &StateManagerSetStateResult{}
}

func (p *StateManagerSetStateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerSetStateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setState_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerSetStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerSetStateResult(%+v)", *p)
}

// Attributes:
//  - Key
type StateManagerGetStateArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewStateManagerGetStateArgs() *StateManagerGetStateArgs {
  return &StateManagerGetStateArgs{}
}


func (p *StateManagerGetStateArgs) GetKey() string {
  return p.Key
}
func (p *StateManagerGetStateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerGetStateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *StateManagerGetStateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getState_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerGetStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *StateManagerGetStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerGetStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StateManagerGetStateResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStateManagerGetStateResult() *StateManagerGetStateResult {
  return &StateManagerGetStateResult{}
}

var StateManagerGetStateResult_Success_DEFAULT string
func (p *StateManagerGetStateResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return StateManagerGetStateResult_Success_DEFAULT
  }
return *p.Success
}
func (p *StateManagerGetStateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StateManagerGetStateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StateManagerGetStateResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *StateManagerGetStateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getState_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StateManagerGetStateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StateManagerGetStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StateManagerGetStateResult(%+v)", *p)
}


