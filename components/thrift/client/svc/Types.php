<?php
namespace svc;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Instance {
  static $_TSPEC;

  /**
   * @var string
   */
  public $pid = null;
  /**
   * @var string
   */
  public $output = null;
  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $stopTime = null;
  /**
   * @var string
   */
  public $serviceName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'output',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'stopTime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'serviceName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['output'])) {
        $this->output = $vals['output'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['stopTime'])) {
        $this->stopTime = $vals['stopTime'];
      }
      if (isset($vals['serviceName'])) {
        $this->serviceName = $vals['serviceName'];
      }
    }
  }

  public function getName() {
    return 'Instance';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->output);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stopTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serviceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Instance');
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::STRING, 1);
      $xfer += $output->writeString($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->output !== null) {
      $xfer += $output->writeFieldBegin('output', TType::STRING, 2);
      $xfer += $output->writeString($this->output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 3);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stopTime !== null) {
      $xfer += $output->writeFieldBegin('stopTime', TType::STRING, 4);
      $xfer += $output->writeString($this->stopTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceName !== null) {
      $xfer += $output->writeFieldBegin('serviceName', TType::STRING, 5);
      $xfer += $output->writeString($this->serviceName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Service {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $commandPath = null;
  /**
   * @var string
   */
  public $command = null;
  /**
   * @var string
   */
  public $action = null;
  /**
   * @var string
   */
  public $schedule = "manual";
  /**
   * @var string
   */
  public $period = null;
  /**
   * @var string
   */
  public $instanceMode = "single";
  /**
   * @var string
   */
  public $singleInstanceAction = "wait";
  /**
   * @var string
   */
  public $status = "draft";
  /**
   * @var string
   */
  public $lastRun = null;
  /**
   * @var array
   */
  public $view = null;
  /**
   * @var array
   */
  public $runningInstances = null;
  /**
   * @var \svc\Instance[]
   */
  public $stoppedInstances = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'commandPath',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'command',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'action',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'schedule',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'period',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'instanceMode',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'singleInstanceAction',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'lastRun',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'view',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        12 => array(
          'var' => 'runningInstances',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\svc\Instance',
            ),
          ),
        13 => array(
          'var' => 'stoppedInstances',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\svc\Instance',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['commandPath'])) {
        $this->commandPath = $vals['commandPath'];
      }
      if (isset($vals['command'])) {
        $this->command = $vals['command'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['schedule'])) {
        $this->schedule = $vals['schedule'];
      }
      if (isset($vals['period'])) {
        $this->period = $vals['period'];
      }
      if (isset($vals['instanceMode'])) {
        $this->instanceMode = $vals['instanceMode'];
      }
      if (isset($vals['singleInstanceAction'])) {
        $this->singleInstanceAction = $vals['singleInstanceAction'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['lastRun'])) {
        $this->lastRun = $vals['lastRun'];
      }
      if (isset($vals['view'])) {
        $this->view = $vals['view'];
      }
      if (isset($vals['runningInstances'])) {
        $this->runningInstances = $vals['runningInstances'];
      }
      if (isset($vals['stoppedInstances'])) {
        $this->stoppedInstances = $vals['stoppedInstances'];
      }
    }
  }

  public function getName() {
    return 'Service';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commandPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->command);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->schedule);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->period);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->instanceMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->singleInstanceAction);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastRun);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->view = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->view[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::MAP) {
            $this->runningInstances = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = '';
              $val13 = new \svc\Instance();
              $xfer += $input->readString($key12);
              $val13 = new \svc\Instance();
              $xfer += $val13->read($input);
              $this->runningInstances[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->stoppedInstances = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \svc\Instance();
              $xfer += $elem19->read($input);
              $this->stoppedInstances []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Service');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commandPath !== null) {
      $xfer += $output->writeFieldBegin('commandPath', TType::STRING, 2);
      $xfer += $output->writeString($this->commandPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->command !== null) {
      $xfer += $output->writeFieldBegin('command', TType::STRING, 3);
      $xfer += $output->writeString($this->command);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::STRING, 4);
      $xfer += $output->writeString($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->schedule !== null) {
      $xfer += $output->writeFieldBegin('schedule', TType::STRING, 5);
      $xfer += $output->writeString($this->schedule);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->period !== null) {
      $xfer += $output->writeFieldBegin('period', TType::STRING, 6);
      $xfer += $output->writeString($this->period);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->instanceMode !== null) {
      $xfer += $output->writeFieldBegin('instanceMode', TType::STRING, 7);
      $xfer += $output->writeString($this->instanceMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->singleInstanceAction !== null) {
      $xfer += $output->writeFieldBegin('singleInstanceAction', TType::STRING, 8);
      $xfer += $output->writeString($this->singleInstanceAction);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 9);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastRun !== null) {
      $xfer += $output->writeFieldBegin('lastRun', TType::STRING, 10);
      $xfer += $output->writeString($this->lastRun);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->view !== null) {
      if (!is_array($this->view)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('view', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->view));
        {
          foreach ($this->view as $kiter20 => $viter21)
          {
            $xfer += $output->writeString($kiter20);
            $xfer += $output->writeString($viter21);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->runningInstances !== null) {
      if (!is_array($this->runningInstances)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('runningInstances', TType::MAP, 12);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->runningInstances));
        {
          foreach ($this->runningInstances as $kiter22 => $viter23)
          {
            $xfer += $output->writeString($kiter22);
            $xfer += $viter23->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stoppedInstances !== null) {
      if (!is_array($this->stoppedInstances)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stoppedInstances', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRUCT, count($this->stoppedInstances));
        {
          foreach ($this->stoppedInstances as $iter24)
          {
            $xfer += $iter24->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InstanceFailed extends TException {
  static $_TSPEC;

  /**
   * @var \svc\Instance
   */
  public $instance = null;
  /**
   * @var string
   */
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'instance',
          'type' => TType::STRUCT,
          'class' => '\svc\Instance',
          ),
        2 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['instance'])) {
        $this->instance = $vals['instance'];
      }
      if (isset($vals['why'])) {
        $this->why = $vals['why'];
      }
    }
  }

  public function getName() {
    return 'InstanceFailed';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->instance = new \svc\Instance();
            $xfer += $this->instance->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->why);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InstanceFailed');
    if ($this->instance !== null) {
      if (!is_object($this->instance)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('instance', TType::STRUCT, 1);
      $xfer += $this->instance->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->why !== null) {
      $xfer += $output->writeFieldBegin('why', TType::STRING, 2);
      $xfer += $output->writeString($this->why);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


